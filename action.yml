name: 'Improve Sanity Check'
description: 'Check the sanity of improve using improve-selenium project'
inputs:
  api-base-url:
    description: 'The API base url to run the tests against. Ignored if running against local setup.'
    required: true
  admin-base-url:
    description: 'The admin portal base url to run the tests against. Ignored if running against local setup.'
    required: true
  app-base-url:
    description: 'The application portal base url to run the tests against. Ignored if running against local setup.'
    required: true
  sanity-secrets:
    description: 'All of the secrets needed by selenium project for running test.'
    required: true
  selenium-image:
    description: 'The url for selenium image'
    required: true
  continue-if-failed:
    description: 'If the checks fail, do not break the sequnce'
    required: true
    default: false
  results-path:
    description: 'The place to put the test results on'
    required: true
    default: /tmp/reports
  suite:
    description: 'The test suite. Default: RunAll.xml'
    required: true
    default: RunAll.xml

outputs:
  sanity-failed:
    value: ${{ steps.sanity-check.outputs.sanity-failed }}
runs:
  using: "composite"
  steps:

    - name: Wait for the API to start up
      shell: bash
      run: |
        echo "Waiting for the API to boot up (if it is recently started)"
        for i in {1..60}
        do
          echo Waiting for a pulse...
          curl -sLw "\n" "${{ inputs.api-base-url }}/actuator/health" && IS_UP=1 || IS_UP=0
          if [ $IS_UP == 1 ]
          then
            break
          fi
          sleep 2
        done
        test $IS_UP -eq 1 || echo "::error::The API is not running"
        test $IS_UP -eq 1

    - name: Run sanity-check extension against the required environment
      id: sanity-check
      shell: bash
      run: |
        export $(echo "${{ inputs.sanity-secrets }}" | xargs)
        rm -rf ${{ inputs.results-path }}
        mkdir ${{ inputs.results-path }}
        chmod 777 ${{ inputs.results-path }}
        export FAILED=0
        echo ./bin/improve-selenium "suites/${{ inputs.suite }}" -d "${{ inputs.results-path }}"

        docker container run -v "${{ inputs.results-path }}":"/tmp/reports" --rm \
          -e API_BASE_URL="${{ inputs.api-base-url }}" \
          -e APP_BASE_URL="${{ inputs.app-base-url }}" \
          -e ADMIN_BASE_URL="${{ inputs.admin-base-url }}" \
          -e SELENIUM_USERNAME=${SELENIUM_USERNAME} \
          -e SELENIUM_USER_PASSWORD=${SELENIUM_USER_PASSWORD} \
          -e SERVICES_URL=${SERVICES_URL} \
          -e PROTON_MAIL=${PROTON_MAIL} \
          -e PROTON_MAIL_PASSWORD=${PROTON_MAIL_PASSWORD} \
          -e SERVICES_USERNAME=${SERVICES_USERNAME} \
          -e SERVICES_PASSWORD=${SERVICES_PASSWORD} \
          -e API_USER=${API_USER} \
          -e API_USER_PASSWORD=${API_USER_PASSWORD} \
          -e API_ADMIN_USER=${API_ADMIN_USER} \
          -e API_ADMIN_PASSWORD=${API_ADMIN_PASSWORD} \
          -e G_ADMIN_PASSWORD=${G_ADMIN_PASSWORD} \
          -e G_USER_PASSWORD=${G_USER_PASSWORD} \
          -e SSO_EMAIL=${SSO_EMAIL} \
          -e SSO_PASSWORD=${SSO_PASSWORD} \
          -e KICKBOX_NG_URL=${KICKBOX_NG_URL} \
          -e KICKBOX_NG_ADMIN_URL=${KICKBOX_NG_ADMIN_URL} \
          --network=host -i ${{ inputs.selenium-image }} \
          ./bin/improve-selenium "suites/${{ inputs.suite }}" -d "${{ inputs.results-path }}" || FAILED=1
        echo "::set-output name=sanity-failed::$FAILED"

    - name: Break if failed
      shell: bash
      run: |
        test ${{ steps.sanity-check.outputs.sanity-failed }} -eq 0 || echo "Tests failed. Please check the results on ${{ inputs.results-path }}"
        if [ ${{ inputs.continue-if-failed }} == false ]
        then
          test ${{ steps.sanity-check.outputs.sanity-failed }} -eq 0
        fi
        echo "All tests successfully passed. The resutls are available on ${{ inputs.results-path }}"
